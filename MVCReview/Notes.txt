MVC in 3 Minutes
=======================

MVC
Designed in 1970s
Widely adopted in web
ASP.NET MVC, Ruby on Rails, Express

Model
	Application data and behavior in terms of problem domain independent of UI
		Moves
		Customer
		Rental
		Transaction
			App state and Rules

	Can take class and use them in other app
	POCOS

View
	The HTML that is sent to the user

Controller
	Responsible for handling an HTTP Request

Vidly.com
	http://vidly.com/movies
		Controller selected to handle request
			Get movies in Model and return in View

Better separation of concerns and more maintainable application

Router
	Selects the right controller to handle a request

vidly.com/movies -> Router -> Controller (MoviesController)
	Method of control is an action

An action in controller is responsible to handle a request

Plugins
	Tools - Extensions and Updates
		Online
			Visual Studio Productivity Power Tools (Extension bring in features)
			Web Essentials
			ReSharper (Optional) Highly Recommended

MVC in Action
==================

1. Create your model first, Movie for example
	just a poco, w/ no logic at first
Lets say we want to Create page - /movies/random and show movie title
2. Create controller for Movies with method called Random
	Called MoviesController
	Have Random() return View(movie);
3. Create a View in Movies directory of Views folder
	called Random
4. Write C# code via @ to display name of movie
	Need to add @model directive at top of page
		because @Model is a dynamic type and compiler needs to be
		told what type is being used
		so... @model MVCReview.Movie
		then to use in HTML @Model.Name

ASP.NET MVC Fundamentals
============================

Action Results - output of our actions
---------------------------------------
** - most commonly used
Type						Helper Method from Controller
**ViewResult						View()
PartialViewResult				PartialView()
ContentResult					Content() - simple text
**RedirectResult					Redirect() - to another route
**RedirectToRouteResult			RedirectToAction()
JsonResult						Json() - josn object
FileResult						File()
**HttpNotFoundResult				HttpNotFound() - returns 404
EmptyResult						(no helper method) if you need to return void

Action Parameters - input for our actions
--------------------------------------------

Parameter Binding

Request -> MVC Framework -> Action
	When request comes in MVC Framework automatically creates parameter objects
	for our actions.
	If action method takes a parameter, it looks for a parameter in the request data
	if so, automatically passed

Parameter Sources
	- In the URL: /movies/edit/1
	- In the query string: /movies/edit?id=1
	- In the form data: id=1

Convention Based Routes
---------------------------

Sometimes you might want to use a Custom Route like
	/movies/released/2015/04
		you can't get two parameters from the default RouteConfig
			so you have to create your own custom route

Attribute Routing
---------------------------
This is the newer, better way to implement custom routing

Need to enable in RouteConfig.cs
	routes.MapMvcAttributeRoutes();

Then add attribute to method in controller
	[Route("movies/released/{year}/{month:regex(\\d{2}):range(1, 12)}")]

Other Constraints besides regex and range (all are functions)
	min
	max
	minlength
	maxlength
	int
	float
	guid

Google - ASP.NET MVC Attribute Route Constraints

Looked at
	Controllers
	Routes
	now Views

View Models
-----------------------------

Right now just showing the name of a movie, but what if we also wanted to show
the name of customers that have rented the movie

In domain model there may not be a relationship between movie and customers class
so we'd have to pass two different models one with movie and another with list of
customers

but in the View we only have 1 model property @Model

we solve this with a viewmodel

a viewmodel is a model built specifically for that view with data
and any logic regarding that view

Models folder is purely for domain classes like Movie, Customer, etc

put viewModels in a separate folder


Razor Views
---------------------------


Partial Views
---------------------------
In _Layout.cshtml - @RenderBody() will render what ever we have in our partial views

kind of like master page in web forms

To use a partial view in another view,
optionally you can pass a model to the partial view
by default it will automatically pass any @model set in parent layout
but if you need to only pass specific models you can do so with 
2nd parameter
	@Html.Partial("_NavBar", Model.Movie)


Data Annotations
---------------------------
- [Required]
- [StringLength(255)]
- [Range(1, 10)]
- [Compare("OtherProperty")]
- [Phone]
EmailAddress
Url
RegularExpression

RESTful Services
---------------------------

APIs shouldn't receive domain model objects
these domain model objects are implementation details
that could change frequently in our application

these changes could break existing clients
if rename or remove properties it will break

need to make api contract as stable as possible
especially becuase its public

to solve this.. need a DTO

DTO is a plain data structure used to transfer data
from client to server

we reduce chances of breaking our application as
changes to domain model happen

remember that changing a DTO is costly so plan accordingly
this would be api versioning

another issue

using a domain model opens up security issues because
a hacker could add additional properties in the json
and these properties would be added to the domain model

what if a property shouldn't be updated? a hacker could
pass that value through... with a DTO you only use the
properties that are needed

ASP.NET Identity in a nut shell
===================================

Domain Classes
	IdentityUser
	Role

API / Service
	UserManager - managing users
	RoleManager - managing user roles
	SignInManager - managing sign in

Persistence (using EF and SQL Database) but can use node or other data stores
	UserStore
	RoleStore


OAuth
=======================
Open Authorization

User wants to login into our account

1. we have to register our application with Facebook (partnership) with private key
2. we redirect user to facebook to login with our secret using https
3. once facebook login, facebook tells user our application want to use profile data
4. once authorized, facebook will redirect back to our application with an authorization token
5. on our account, we pass back the auth token to facebook to verify auth token
6. then we get an access token to get facebook profile information

don't manaully do this.. baked into ASP.NET Identity

2 steps

1. Enable SSL (for secure communication)
2. Register our app with Facebook

Performance Optimization
==============================

Premature optimization is the root of all evils - Donald Knuth - Stanford University

Profile first, THEN optimize!

Three-tier Architecture
	Data - SQL Server
	Application - IIS
	Client - Browser (Frontend)

Most bottlenecks in Data Tier... More Gain.. less results moving up the stack to the Frontend

Mosh's Optimization Rules

- Do not sacrifice the maintainability of your code to premature optimization.
- Be realistic and think like an "engineer"
- Be pragmatic and ensure your efforts have obervable results and give value.

Data Tier
==========
	Schema (Fix this)
		Primary keys
		Relationships
		Indexes on filter columns
			EF Code first automatially add primary keys and indexes
		Entity-Attribute-Value (EAV)
			Problems with this
				No O/RMS
				Long, gigantic queries (by hand)
				Extremely slow
	Queries (Fix this)
		sometimes EF queries aren't the best
		keep an eye on this.. if they are too complex, just write an optimized query to get results
		Use Execution Plan in SQL Server (to see how SQL Server calls query and costs)
		- Create a "read" database (look up CQRS), that is optimized just to read data, tables are pre-joined
			this approach means you have to sync 2 databases
		- Use caching - run a slow query, store results in memory

Glimpse
=========
	Use Eager Loading, not Lazy Loading.. in web application we should know the data we need to get per request
		N + 1 issue because of lazy loading

	/glimpse.axd to get to Glimpse end point

	great open source profile tool


Application Tier (Middle Tier)
===============================

Output Caching
	Slow page, costly query, if data doesnt change often you should cache the output of the page
		will store rendered HTML in teh cache.. MVC will serve from the cache

	To enable output caching, use [OutputCache] attribute on the controller action or entire controller (action filter)
		also set a duration in seconds to invalidate the cache

		For a user put a client or everyone on the server
			Location = OutputCacheLocation.Server,

		VaryByParam - if output changes base don param.. can cache separaly for its param

	Downside of Caching is showing stale data.. where is my new customer?

	Ensure that caching is disabled
		[OutputCache(Duration = 0, VaryByParam = "*", NoStore = true)]  // disables caching on output

Data Caching
	Might want to cache data across different actions or controllers
		like list of roles that don't change that often

	Stay away from dogma arguments

	How to cache in controller

	using System.Runtime.Caching

	if (MemoryCache.Default["Genres"] == null)
	{
		// get from database
		MemoryCache.Default["Genres"] = _context.Genres.ToList();
	}

	var genres = MemoryCache.Default["Genres"] as IEnumerable<Genre>;
	
	





